# CI/CD Pipeline for Brain Go Brrr
# Simplified for current development stage

name: CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "0.8.1"

jobs:
  # Code quality and linting
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: uv sync

      - name: Run ruff formatting check
        run: uv run ruff format src tests scripts --check --diff

      - name: Run ruff linting (strict mode)
        run: |
          # Run with all rules enabled for CI
          uv run ruff check src tests scripts \
            --output-format=github \
            --select=ALL \
            --ignore=D,ANN101,ANN102,COM812,ISC001,S101,ANN201,PLR2004,PLC0415

      - name: Run type checking (strict mode)
        run: |
          # Type check source code with strict settings
          uv run mypy src --config-file=mypy.ini

          # Type check tests with relaxed settings
          uv run mypy tests --config-file=mypy.ini || true

      - name: Run security checks
        run: |
          # Bandit security scanning
          pip install bandit[toml]
          bandit -r src -ll -x tests

      - name: Check docstring coverage
        run: |
          # Use pydocstyle for docstring checks
          pip install pydocstyle[toml]
          pydocstyle src --convention=google || true

      # Security check removed - bandit not in dependencies

  # Testing on primary platform
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: quality
    timeout-minutes: 15  # Generous timeout for entire job
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install system packages
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y poppler-utils fonts-dejavu-core

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run tests
        run: uv run pytest tests -m "not slow and not integration and not external" --maxfail=5
        timeout-minutes: 10

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Documentation build
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Build documentation
        run: uv run mkdocs build

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: site/
