# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is advised to use the provided PyCharm gitignore file.
.idea/

# VS Code
.vscode/
*.code-workspace

# AI/ML specific
# Model files
*.h5
*.hdf5
*.pkl
*.pickle
*.joblib
*.pt
*.pth
*.onnx
*.pb
*.tflite
*.ckpt
*.safetensors

# Data files
data/
datasets/*/raw/
datasets/*/processed/
*.csv
*.tsv
# Don't ignore JSON in test fixtures
!tests/fixtures/**/*.json
*.json
*.jsonl
*.parquet
*.feather
*.h5
*.hdf5

# Tensorboard logs
runs/
logs/
tensorboard_logs/

# Weights & Biases
wandb/

# MLflow
mlruns/
.mlflow/

# DVC
.dvc/
*.dvc

# Experiments
experiments/
checkpoints/
saved_models/

# Temporary files
*.tmp
*.temp
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Secrets and API keys
*.key
*.pem
*.p12
config/secrets.yml
.secrets/

# Large files that shouldn't be in git
*.zip
*.tar.gz
*.7z
*.rar
*.iso
*.dmg

# EEG/Brain data specific
*.edf
*.bdf
*.gdf
*.cnt
*.vhdr
*.vmrk
*.eeg
*.fdt
*.set
# Note: .fif files in tests/fixtures/ are synthetic test data and should be committed
# Real patient .fif files should never be committed

# Jupyter notebook outputs (keep structure, remove outputs)
# Uncomment if you want to track notebooks without outputs
# *.ipynb

# Literature files
# Keep markdown conversions and metadata, but ignore large PDFs
literature/pdfs/*.pdf
!literature/pdfs/.gitkeep
# Keep processed literature but not raw downloads
literature/raw/
literature/downloads/

# Reference repositories - already have their own git history
# These should NEVER be modified by our linting/formatting tools
reference_repos/

# Modern development tools
# UV (uv.lock is kept for reproducibility)
.uv/
uv.lock

# Ruff cache
.ruff_cache/

# Coverage reports
.coverage.*
htmlcov/
coverage.xml
*.cover
*.py,cover

# Pytest cache
.pytest_cache/

# Pre-commit
.pre-commit-config.yaml.bak

# Build artifacts
build/
dist/
*.egg-info/
site/

# Output directories
outputs/
logs/
pipeline.log

# MkDocs
site/
docs/_build/

# Jupyter notebook checkpoints
.ipynb_checkpoints/

# Profile outputs
*.prof

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo
*~

# OS artifacts
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Development artifacts
*.bak
*.orig
*.tmp
*.temp

# Service-specific outputs
services/outputs/
services/logs/
services/*.log

# Example outputs
examples/outputs/
examples/logs/
examples/*.log

# Test reports
pipeline_test_report.txt
*_test_report.txt
